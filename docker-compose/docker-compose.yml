networks:
  pool:
    driver: bridge

volumes:
  mysql:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/mysql
      o: bind
  mwc:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/mwc
      o: bind
  wallet:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/wallet
      o: bind
  services:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/services
      o: bind
  letsencrypt: 
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/letsencrypt
      o: bind
  rmq:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/rmq
      o: bind
  redis-master:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/redis-master
      o: bind
  stratum1:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/stratum1
      o: bind
  stratum2:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/stratum2
      o: bind
  dbbackup:
    driver: local
    driver_opts:
      type: none
      device: ${POOL_DATA_DIR}/dbbackup
      o: bind

services:
   mysql:
     image: mysql:5.7
     networks:
       - pool
     volumes:
       - mysql:/var/lib/mysql
     environment:
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
       MYSQL_DATABASE: mwcpool
       MYSQL_USER: mwcpool
       MYSQL_PASSWORD: mysqlpass
     restart: always

   mwc:
     image: mwc:latest
     build: ../mwc
     networks:
       - pool
     ports:
       - 3414:3414
     expose:
       - 3416
       - 3413
     volumes:
       - mwc:/server
     environment:
       NET_FLAG: ${NET_FLAG}
       WALLETPORT: ${WALLETPORT_PUBLIC}
       NODE_API_SECRET: ${NODE_API_SECRET}
     command: /run.sh
     restart: always

   logstash-poolblocks:
     image: logstash:latest
     build: ../logstash
     depends_on:
       - mwc
     networks:
       - pool
     volumes:
       - mwc:/server
     environment:
       RMQ_USER: ${RABBITMQ_USER}
       RMQ_PASSWORD: ${RABBITMQ_PASSWORD}
     command: /run.sh poolblockfilter.conf
     restart: always

   wallet:
     image: mwc:latest
     build: ../mwc
     depends_on:
       - mwc
     networks:
       - pool
     expose:
       - ${WALLETPORT_PUBLIC}
     volumes:
       - wallet:/wallet
     environment:
       NET_FLAG: ${NET_FLAG}
       WALLET_PASSWORD: ${WALLET_PASSWORD}
       WALLET_OWNER_API_PASSWORD: ${WALLET_OWNER_API_PASSWORD}
       NODE_API_SECRET: ${NODE_API_SECRET}
     command: /run-wallet.sh public
     restart: always

   wallet_private:
     image: mwc:latest
     build: ../mwc
     depends_on:
       - mwc
     networks:
       - pool
     expose:
       - ${WALLETPORT_PRIVATE}
     volumes:
       - wallet:/wallet
     environment:
       NET_FLAG: ${NET_FLAG}
       WALLET_PASSWORD: ${WALLET_PASSWORD}
       WALLET_OWNER_API_PASSWORD: ${WALLET_OWNER_API_PASSWORD}
       NODE_API_SECRET: ${NODE_API_SECRET}
     command: /run-wallet.sh private
     restart: always

   payment_api:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - mysql
       - wallet_private
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     expose:
       - ${PAYMENT_API_PORT}
     volumes:
       - services:/services
     environment:
       PAYMENT_API_PORT: ${PAYMENT_API_PORT}
       WALLET_OWNER_API_USER: ${WALLET_OWNER_API_USER}
       WALLET_OWNER_API_PASSWORD: ${WALLET_OWNER_API_PASSWORD}
       MWC_POOL_ADMIN_USER: ${MWC_POOL_ADMIN_USER}
       MWC_POOL_ADMIN_PASSWORD: ${MWC_POOL_ADMIN_PASSWORD}
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
       APP_SECRET_KEY: ${APP_SECRET_KEY}
     command: /usr/local/bin/api/payment_api.py
     restart: always

   blockwatcher:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - mysql
       - mwc
     networks:
       - pool
     volumes:
       - services:/services
     environment:
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
     command: /usr/local/bin/blockWatcher.py
     restart: always

   mwcstats:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - mysql
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     volumes:
       - services:/services
     environment:
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
     command: /usr/local/bin/mwcStats.py
     restart: always

   poolstats:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - mysql
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     volumes:
       - services:/services
     environment:
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
     command: /usr/local/bin/poolStats.py
     restart: always

   workerstats:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - mysql
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     volumes:
       - services:/services
     environment:
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
     command: /usr/local/bin/workerStats.py
     restart: always

   shareaggr:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - mysql
       - rmq
       - redis-master
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     volumes:
       - services:/services
     environment:
       RMQ: ${RMQ_SERVERS}
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
       RABBITMQ_USER: ${RABBITMQ_USER}
       RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
     command: /usr/local/bin/shareAggr.py
     restart: always

   paymentestimator:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - mysql
       - redis-master
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     volumes:
       - services:/services
     environment:
       PPLNG_WINDOW_SIZE: ${PPLNG_WINDOW_SIZE}
       BLOCK_REWARD: ${BLOCK_REWARD}
       MWC_POOL_ADMIN_USER: ${MWC_POOL_ADMIN_USER}
       MWC_POOL_ADMIN_PASSWORD: ${MWC_POOL_ADMIN_PASSWORD}
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
     command: /usr/local/bin/paymentEstimator.py
     restart: always

   auditor:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - mysql
       - wallet_private
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     networks:
       - pool
     volumes:
       - services:/services
     environment:
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
       WALLET_OWNER_API_USER: ${WALLET_OWNER_API_USER}
       WALLET_OWNER_API_PASSWORD: ${WALLET_OWNER_API_PASSWORD}
     command: /usr/local/bin/auditor.py
     restart: always

   stratum1:
     image: stratum:latest
     build: ../stratum
     depends_on:
       - redis-master
       - rmq
     networks:
       - pool
     expose:
       - ${STRATUM_INTERNAL_PORT}
     volumes:
       - stratum1:/stratum
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     environment:
       DIFFICULTY: ${STRATUM1_DIFFICULTY}
       MWC_ADDRESS: mwc
       POOL: ${POOL_NAME}
     command: /run.sh
     restart: always

   logstash-stratum1:
     image: logstash:latest
     build: ../logstash
     depends_on:
       - stratum1
       - rmq
     networks:
       - pool
     volumes:
       - stratum1:/stratum
     environment:
       RMQ_USER: ${RABBITMQ_USER}
       RMQ_PASSWORD: ${RABBITMQ_PASSWORD}
     command: /run.sh sharefilter.conf
     restart: always

   stratum2:
     image: stratum:latest
     build: ../stratum
     depends_on:
       - redis-master
       - rmq
     networks:
       - pool
     expose:
       - ${STRATUM_INTERNAL_PORT}
     volumes:
       - stratum2:/stratum
     #ports:
     #  - 3333
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     environment:
       DIFFICULTY: ${STRATUM2_DIFFICULTY}
       MWC_ADDRESS: mwc
       POOL: ${POOL_NAME}
     command: /run.sh
     restart: always

   logstash-stratum2:
     image: logstash:latest
     build: ../logstash
     depends_on:
       - stratum2
       - rmq
     networks:
       - pool
     volumes:
       - stratum2:/stratum
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     environment:
       RMQ_USER: ${RABBITMQ_USER}
       RMQ_PASSWORD: ${RABBITMQ_PASSWORD}
     command: /run.sh sharefilter.conf
     restart: always

   apiv1:
     image: services:latest
     build: ../mwc-py
     depends_on:
       - redis-master
       - mysql
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     expose:
       - ${APIV1_PORT}
     #ports:
     # - ${APIV1_PORT}:${APIV1_PORT}
     volumes:
       - services:/services
     environment:
       PPLNG_WINDOW_SIZE: ${PPLNG_WINDOW_SIZE}
       BLOCK_REWARD: ${BLOCK_REWARD}
       MWC_POOL_ADMIN_USER: ${MWC_POOL_ADMIN_USER}
       MWC_POOL_ADMIN_PASSWORD: ${MWC_POOL_ADMIN_PASSWORD}
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
       APP_SECRET_KEY: ${APP_SECRET_KEY}
     command: gunicorn -w 8 --timeout 999 -b 0.0.0.0:13423 api.api:app
     restart: always

   apiv2:
     image: apiv2:latest
     build: ../mwc-js/api
     depends_on:
       - redis-master
       - mysql
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     #ports: 
     # - ${APIV2_PORT}:${APIV2_PORT}
     expose:
       - ${APIV2_PORT}
     environment:
       MWC_POOL_ADMIN_USER: ${MWC_POOL_ADMIN_USER}
       MWC_POOL_ADMIN_PASSWORD: ${MWC_POOL_ADMIN_PASSWORD}
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
     command: /entrypoint.sh
     restart: always

   webui:
     image: webui-js:latest
     build: ../mwc-js/webui
     depends_on:
       - apiv1
       - apiv2
     networks:
       - pool
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     #ports:
     #  - ${WEBUI_PORT}:${WEBUI_PORT}
     expose:
       - ${WEBUI_PORT}
     environment:
       NODE_ENV: ${NODE_ENV}
       pool: ${POOL_NAME}
     command: /entrypoint.sh
     restart: always

   nginx:
     image: mwcnginx:latest
     build: ../nginx
     depends_on:
       - webui
       - apiv1
       - apiv2
       - stratum1
       - stratum2
     networks:
       - pool
     ports:
       - 443:443
       - 80:80
       - ${STRATUM1_PORT}:${STRATUM1_PORT}
       - ${STRATUM1_SSL_PORT}:${STRATUM1_SSL_PORT}
       - ${STRATUM2_PORT}:${STRATUM2_PORT}
       - ${STRATUM2_SSL_PORT}:${STRATUM2_SSL_PORT}
       - ${STRATUM_PRIVATE_PORT}:${STRATUM_PRIVATE_PORT}
     logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
     volumes:
       - letsencrypt:/etc/letsencrypt
     environment:
       MYDOMAIN: ${POOL_DOMAIN}
     command: /entrypoint.sh
     restart: always

   rmq:
     image: rmq:latest
     build: ../rmq
     networks:
       - pool
     expose:
       - 5672
     volumes:
       - rmq:/var/lib/rabbitmq
     environment:
       RABBITMQ_USER: ${RABBITMQ_USER}
       RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
     command: /entrypoint.sh
     restart: always


   redis-master:
     image: redis:latest
     networks:
       - pool
     expose:
       - 6379
     volumes:
       - redis-master:/data
     restart: always


   ########## NEW ###########
   blockvalidator:
     image: services
     build: ../mwc-py
     networks:
       - pool
     depends_on:
       - redis-master
       - mysql
     volumes:
       - services:/services
     environment:
       MWC_POOL_ADMIN_USER: ${MWC_POOL_ADMIN_USER}
       MWC_POOL_ADMIN_PASSWORD: ${MWC_POOL_ADMIN_PASSWORD}
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
     command: /cron/blockvalidator.sh
     restart: always

   dbbackup:
     image: services
     build: ../mwc-py
     networks:
       - pool
     depends_on:
       - redis-master
       - mysql
     environment:
       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  # Ensure this is set in your environment or .env file
     volumes:
       - services:/backup  # Ensure backups are stored persistently
     command: /cron/init_dbbackup.sh
     restart: always
  
   paymentmaker:
     image: services
     build: ../mwc-py
     networks:
       - pool
     depends_on:
       - redis-master
       - mysql
     volumes:
       - services:/services
     environment:
      PPLNG_WINDOW_SIZE: ${PPLNG_WINDOW_SIZE}
      BLOCK_REWARD: ${BLOCK_REWARD}
      # You would typically pass these secrets securely
      MWC_POOL_ADMIN_USER: ${MWC_POOL_ADMIN_USER} 
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
     command: /cron/startPaymentMaker.sh
     restart: always

   blockunlocker:
    image: services
    build: ../mwc-py
    networks:
      - pool
    depends_on:
      - redis-master
      - mysql
    volumes:
      - services:/services
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      WALLET_OWNER_API_USER: ${WALLET_OWNER_API_USER}
      WALLET_OWNER_API_PASSWORD: ${WALLET_OWNER_API_PASSWORD}
    command: /cron/startPoolBlockUnlocker.sh
    restart: always

   tidywallet:
    image: services
    build: ../mwc-py
    networks:
      - pool
    depends_on:
      - redis-master
      - mysql
    volumes:
      - services:/services
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      WALLET_OWNER_API_USER: ${WALLET_OWNER_API_USER}
      WALLET_OWNER_API_PASSWORD: ${WALLET_OWNER_API_PASSWORD}
    command: /cron/startTidyWallet.sh
    restart: always

